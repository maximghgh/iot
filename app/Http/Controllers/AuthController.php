<?php

namespace App\Http\Controllers;

use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use App\Mail\VerifyEmail;
use App\Models\User;
use App\Models\PendingUser;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Carbon;
use Illuminate\Validation\ValidationException;
use App\Mail\VerificationCodeMail;

class AuthController extends Controller
{
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public function register(Request $request)
    {
        \Log::info('üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ register:', $request->all());

        try {
            $request->validate([
                'name' => 'required|string|max:255',
                'email' => 'required|string|email|max:255|unique:users',
                'password' => 'required|string|min:5',
            ], [
                'email.unique' => '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
                'password.min' => '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.',
            ]);

            // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $pendingUser = PendingUser::create([
                'name'       => $request->name,
                'email'      => $request->email,
                'password'   => Hash::make($request->password),
                'token'      => sha1($request->email . now()),
                'expires_at' => Carbon::now()->addMinutes(60),
            ]);

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            $verificationUrl = URL::temporarySignedRoute(
                'verify.email',
                Carbon::now()->addMinutes(60),
                ['token' => $pendingUser->token]
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            Mail::to($request->email)->send(new VerifyEmail($verificationUrl, $request->name));

            return response()->json([
                'success'     => true,
                'message'     => '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞',
                'email_sent'  => true,
                'redirect'    => '/verify'
            ], 200);
        } catch (ValidationException $e) {
            \Log::error('‚õî –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', $e->errors());
            return response()->json(['success' => false, 'errors' => $e->errors()], 422);
        } catch (\Exception $e) {
            \Log::error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', ['error' => $e->getMessage()]);
            return response()->json(['success' => false, 'error' => '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' . $e->getMessage()], 500);
        }
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    public function verifyEmail(Request $request, $token)
    {
        $pendingUser = PendingUser::where('token', $token)
            ->where('expires_at', '>', now())
            ->first();

        if (!$pendingUser) {
            return redirect('/')->with('error', '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞.');
        }

        if (User::where('email', $pendingUser->email)->exists()) {
            return redirect('/')->with('error', '‚ùå –≠—Ç–æ—Ç email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.');
        }

        // –°–æ–∑–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::create([
            'name'              => $pendingUser->name,
            'email'             => $pendingUser->email,
            'password'          => $pendingUser->password, // —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
            'email_verified_at' => now()
        ]);

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        $pendingUser->delete();

        // –ö–æ–¥–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ base64
        $encodedUser = base64_encode(json_encode([
            'id'    => $user->id,
            'name'  => $user->name,
            'email' => $user->email
        ]));

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ?verifiedUser=...
        return redirect("/?verifiedUser={$encodedUser}");
    }

    public function login(Request $request)
    {
        $request->validate([
            'login' => 'required|email',
            'password' => 'required'
        ]);

        if (Auth::validate(['email' => $request->login, 'password' => $request->password])) {
            $user = \App\Models\User::where('email', $request->login)->first();

            $verificationCode = rand(100000, 999999);
            session(['verification_code' => $verificationCode, 'user_id' => $user->id]);

            Mail::to($user->email)->send(new VerificationCodeMail($verificationCode));

            return response()->json(['success' => true]);
        }

        return response()->json(['success' => false], 401);
    }

    public function verifyCode(Request $request)
    {
        $request->validate([
            'code' => 'required|digits:6'
        ]);

        if ($request->code == session('verification_code')) {
            Auth::loginUsingId(session('user_id'));
            session()->forget(['verification_code', 'user_id']);

            return response()->json(['success' => true, 'user' => Auth::user()]);
        }

        return response()->json(['success' => false], 401);
    }
    public function resendEmail(Request $request)
    {
        // –ü–æ–ª—É—á–∞–µ–º email –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        $email = $request->input('user_email');

        // –ù–∞—Ö–æ–¥–∏–º PendingUser –ø–æ email
        $pendingUser = PendingUser::where('email', $email)->first();
        if (!$pendingUser) {
            return back()->with('error', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.');
        }

        // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å expires_at –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        // $pendingUser->expires_at = Carbon::now()->addMinutes(60);
        // $pendingUser->save();

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π token
        $verificationUrl = URL::temporarySignedRoute(
            'verify.email',
            Carbon::now()->addMinutes(60),
            ['token' => $pendingUser->token]
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        Mail::to($pendingUser->email)->send(new VerifyEmail($verificationUrl, $pendingUser->name));

        return back()->with('status', '–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ!');
    }



}
